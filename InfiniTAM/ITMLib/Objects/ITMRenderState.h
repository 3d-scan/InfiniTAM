// Copyright 2014 Isis Innovation Limited and the authors of InfiniTAM

#pragma once

#include <stdlib.h>

#include "../Utils/ITMLibDefines.h"
#include "../../ORUtils/Image.h"

namespace ITMLib
{
	namespace Objects
	{
		/** \brief
			Stores the render state used by the SceneReconstruction
			and Visualisation engines.
			*/
		class ITMRenderState
		{
		public:
			/** @brief
			Gives the raycasting operations an idea of the
			depth range to cover

			Each pixel contains an expected minimum and maximum
			depth. The raycasting step would use this
			information to reduce the range for searching an
			intersection with the actual surface. Should be
			updated by a ITMLib::Engine::ITMVisualisationEngine
			before any raycasting operation.
			*/
			ORUtils::Image<Vector2f> *renderingRangeImage;

			/** @brief
			Float rendering output of the scene, containing the 3D
			locations in the world generated by the raycast.

			This is typically created as a by-product of
			raycasting operations.
			*/
			ORUtils::Image<Vector4f> *raycastResult;

			ORUtils::Image<Vector4u> *raycastImage;

			ITMRenderState(const Vector2i &imgSize, float vf_min, float vf_max, bool useCudaAlloc)
			{
				renderingRangeImage = new ORUtils::Image<Vector2f>(imgSize, useCudaAlloc);
				raycastResult = new ORUtils::Image<Vector4f>(imgSize, useCudaAlloc);
				raycastImage = new ORUtils::Image<Vector4u>(imgSize, useCudaAlloc);

				ORUtils::Image<Vector2f> *buffImage = new ORUtils::Image<Vector2f>(imgSize, false);

				Vector2f v_lims(vf_min, vf_max);
				for (int i = 0; i < imgSize.x * imgSize.y; i++) buffImage->GetData(false)[i] = v_lims;

				if (useCudaAlloc)
				{
#ifndef COMPILE_WITHOUT_CUDA
					ITMSafeCall(cudaMemcpy(renderingRangeImage->GetData(true), buffImage->GetData(false),
						sizeof(Vector2f) * imgSize.x * imgSize.y, cudaMemcpyHostToDevice));
#endif
				}
				else memcpy(renderingRangeImage->GetData(false), buffImage->GetData(false), sizeof(Vector2f) * imgSize.x * imgSize.y);

				delete buffImage;
			}

			virtual ~ITMRenderState()
			{
				delete renderingRangeImage;
				delete raycastResult;
				delete raycastImage;
			}
		};
	}
}
